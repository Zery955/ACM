namespace Inversion{
	const int N = 5e5 + 5;
	typedef int Data;
	Data c[N];
	Data* a;
	int n;
	void init(Data *_a, int _n)
	{
		n = _n;
		a = _a;
	}
	long long merge(int l = 1, int r = n)
	{
		int mid = l + r >> 1;
		if(l == r) return 0;
		long long res = 0;
		res += merge(l, mid);
		res += merge(mid + 1, r);
		int i = l, j = mid + 1, k = l;
		while(i <= mid && j <= r)
		{
			if(a[i] <= a[j]) c[k ++] = a[i ++ ];
			else
			{
				res += mid - i + 1;
				c[k ++] = a[j ++ ];
			}
		}
		while(i <= mid) c[k ++] = a[i ++];
		while(j <= r) c[k ++] = a[j ++];
		for(int i = l; i <= r; ++ i) a[i] = c[i];
		return res;
	}
}