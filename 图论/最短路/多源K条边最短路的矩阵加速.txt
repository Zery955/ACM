struct Matrix{
	typedef long long Data;
	const static int N = 100 + 1;
	Data m[N][N];
	int n;
	Matrix(int _n = N){
		n = _n;
		memset(m, 0x3f, sizeof m);
	}
	void unit()
	{
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < n; ++j)
				if(i == j) m[i][j] = 0;
					else m[i][j] = 0x3f3f3f3f3f3f3f3f;
	}
	Data* operator [](int r)
	{
		return m[r];
	}
	Matrix operator *(const Matrix& a)
	{
		Matrix res(n);
		for(int k = 0; k < n; ++k)
			for(int i = 0; i < n; ++i)
				for(int j = 0; j < n; ++j)
				{
					res.m[i][j] = min( m[i][k] + a.m[k][j], res.m[i][j]);
				}
		return res;
	}
	Matrix operator ^(long long k)
	{
		Matrix a(*this);
		Matrix res(n);
		res.unit();
		while(k)
		{
			if(k & 1) res = res * a;
			a = a * a;
			k >>= 1;
		}
		return res;
	}
	Matrix operator ^(char *s) //指数高精度 k 进制数
	{
		Matrix a(*this);
		Matrix res(n);
		res.unit();
		int len = strlen(s);
		for(int i = len - 1; i >= 0; --i)
		{
			if(s[i] - '0') res = res * (a ^ (s[i] - '0'));
			a = a ^ 10; //10进制,其他进制在此修改
		}
		return res;
	}
};