namespace MatrixTree{
	//无向图
	typedef long long ll;
	const int N = 300 + 5;
	const ll Mod = 1e9 + 7;
	ll a[N][N];
	int n;
	void init(int _n)
	{
		n = _n;
		for(int i = 0; i <= n; ++ i)
			for(int j = 0; j <= n; ++ j)
				a[i][j] = 0;
	}
	void addedge(int u, int v, ll c)
	{
		a[u][u] = (a[u][u] + c) % Mod;
		a[u][v] = (a[u][v] - c + Mod) % Mod;
	}
	ll ksm(ll a, ll b)
	{
		ll res = 1;
		while(b)
		{
			if(b & 1) res = res * a % Mod;
			a = a * a % Mod;
			b >>= 1;
		}
		return res;
	}
	ll gauss()
	{
		ll res = 1;
		for(int i = 2, inv, t; i <= n; ++ i)
		{
			for(int j = i + 1; j <= n; ++ j) if(!a[i][i] && a[j][i])
			{
				res = - res;
				swap(a[i], a[j]);
				break;
			}
			inv = ksm(a[i][i], Mod - 2);
			for(int j = i + 1; j <= n; ++ j)
			{
				t = a[j][i] * inv % Mod;
				for(int k = i; k <= n; ++ k)
				{
					a[j][k] = (a[j][k] - a[i][k] * t % Mod + Mod) % Mod;
				}
			}
		}
		for(int i = 2; i <= n; ++ i) res = res * a[i][i] % Mod;
		return res;
	}	
}