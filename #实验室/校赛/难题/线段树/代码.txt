#include <iostream>
#include <stack>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <bitset>
#include <vector>
#include <map>
#include <queue>
#include <cmath>
#include <set>
using namespace std;
//************************************
typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<long long, long long> pll;
typedef pair<double, double> pdd;
typedef bitset<100> BIT;
const double eps = 1e-10;
template<typename T> void read(T &x){
    int f = 1;x = 0;char s = getchar();
    while(s < '0'|| s > '9'){if(s == '-') f = -1; s = getchar();}
    while(s >= '0' && s <= '9'){x = x * 10 + s - '0'; s = getchar();}
    x *= f;
}
template<typename T> void print(T x){
    if(x < 0)putchar('-'),x = -x;
    if(x > 9) print(x / 10);
    putchar(x % 10 + '0');
}
template<typename T> void println(T x){
    if(x < 0)putchar('-'),x = -x;
    if(x > 9) print(x / 10);
    putchar(x % 10 + '0');
	putchar('\n');
}
template<typename T, typename ... Args> void read(T &x, Args& ... args){read(x);read(args ...);} 
inline void reads(char *a){scanf("%s", a);}
template<typename ... Args>void reads(char* a, Args* ... args){scanf("%s", a); reads(args...);}
template<typename T, typename ... Args>void print(T x, Args ... args){print(x); putchar(' '); print(args...);}
template<typename T, typename ... Args> void println(T x, Args ... args){print(x); putchar(' '); println(args...);}
inline void prints(char *a){printf("%s", a);}
template<typename T> inline T sqr(T x){return x * x;}
template<typename T> inline T random(T R){return (double)rand() / RAND_MAX * R + ((T)0.5 == 0 ? 0.5 : 0.0);}
template<typename T> inline T random(T L, T R){return random(R - L) + L;}
ll ksm(ll a, ll k, ll Mod){ll res = 1; while(k){if(k & 1) (res *= a) %= Mod; (a *= a) %= Mod; k >>= 1;} return res % Mod;}
inline ll inv(ll a, ll Mod){return ksm(a, Mod - 2, Mod);}
inline void cap_bit(ll x){ for(int i = 63; i >= 0; --i)if(x >> i & 1) {printf("Need (%d) = %lld\n", i + 1, 1LL << (i + 1)); return;}}
inline void cal_space(ll x){printf("%lld MB\n" ,x >> 20);}
const int dx4[] = {0, 0, -1, 1};
const int dy4[] = {-1, 1, 0, 0};
const int dx6[] = {1, -1, 0, 0, 0, 0};
const int dy6[] = {0, 0, 1, -1, 0, 0};
const int dz6[] = {0, 0, 0, 0, 1, -1};
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define nbsp putchar(' ')
#define br puts("")
#define pi acos(-1.0)
#define gcd(x, y) __gcd(x, y)
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define xx first
#define yy second
#define lowbit(x) (x) & (-x)
const int N = 8e3 + 5;
const int M = 21;
const ll Mod = 10007;
const ll INF = 1e16;
//************************************
namespace SegmentTree{
	const int N = 1e5 + 5;
	const int Mod = 10007;
	typedef long long ll;
	struct node	//设计线段树节点
	{
		int l, r;
		ll fsame;
		ll fmul, fadd;
		ll sum[4];
	}t[N * 4];
	void push_up(node &rt, const node &ls, const node &rs)//定义上传操作
	{
		for(int i = 1; i <= 3; ++i) rt.sum[i] = (ls.sum[i] + rs.sum[i]) % Mod;
	}
	void mark(int k, int f, ll fval)
	{	
		fval %= Mod;
		ll s[4] = {0, t[k].sum[1], t[k].sum[2], t[k].sum[3]};
		ll len = t[k].r - t[k].l + 1;
		ll fval2 = fval * fval % Mod;
		ll fval3 = fval2 * fval % Mod;
		if(f <= 2 && t[k].fsame == -1)
		{
			if(f == 1)
			{
				t[k].fadd += fval;
				t[k].sum[1] = (s[1] + len * fval % Mod) % Mod;
				t[k].sum[2] = (s[2] + 2 * fval * s[1] % Mod + len * fval2 % Mod) % Mod;
				t[k].sum[3] = (s[3] + 3 * fval2 * s[1] % Mod + 3 * fval * s[2] % Mod + len * fval3 % Mod) % Mod;
			}
			else 
			{
				t[k].fadd = t[k].fadd * fval % Mod;
				t[k].fmul = t[k].fmul * fval % Mod;
				ll fval2 = fval * fval % Mod;
				ll fval3 = fval2 * fval % Mod;
				t[k].sum[1] = t[k].sum[1] * fval % Mod;
				t[k].sum[2] = t[k].sum[2] * fval2 % Mod;
				t[k].sum[3] = t[k].sum[3] * fval3 % Mod;
			}
		}
		else
		{
			if(f == 1) t[k].fsame = (t[k].fsame + fval) % Mod;
			else if(f == 2) t[k].fsame = t[k].fsame * fval % Mod;
			else t[k].fsame = fval;
			t[k].fmul = 1;
			t[k].fadd = 0;
			t[k].sum[1] = len * t[k].fsame % Mod;
			t[k].sum[2] = t[k].sum[1] * t[k].fsame % Mod;
			t[k].sum[3] = t[k].sum[2]* t[k].fsame % Mod;
		}
	}
	void push_down(int k)
	{
		if(t[k].fsame != -1)
		{
			mark(k << 1, 3, t[k].fsame);
			mark(k << 1 | 1, 3, t[k].fsame);
		}
		else
		{
			mark(k << 1, 2, t[k].fmul);
			mark(k << 1 | 1, 2, t[k].fmul);
			mark(k << 1, 1, t[k].fadd);
			mark(k << 1 | 1, 1, t[k].fadd);
		}
		t[k].fsame = -1;
		t[k].fmul = 1;
		t[k].fadd = 0;
	}
	void build(int k, int l, int r)
	{
		if(l == r)//定义叶节点初始化操作
		{	
			t[k] = {l, r, 0, 0, 0, 0, 0, 0, 0};
			return;
		}
		int mid = (l + r) / 2;
		build(k << 1, l, mid);
		build(k << 1 | 1, mid + 1, r);
		push_up(t[k], t[k << 1], t[k << 1 | 1]);
		//定义非叶节点的初始化操作
		t[k].l = l, t[k].r = r;
		t[k].fsame = -1;
		t[k].fadd = 0;
		t[k].fmul = 1;
	}
	void modify(int k, int x, int y, int f, long long val)
	{
		if(x > y) return;
		if(x <= t[k].l && t[k].r <= y) return mark(k, f, val);
		push_down(k);
		int mid = (t[k].l + t[k].r) / 2;
		if(x <= mid) modify(k << 1, x, y, f, val);
		if(y > mid) modify(k << 1 | 1, x, y, f, val);
		push_up(t[k], t[k << 1], t[k << 1 | 1]);
	}
	node query(int k, int x, int y)
	{
		
		if(x <= t[k].l && t[k].r <= y) return t[k];
		push_down(k);
		int mid = (t[k].l + t[k].r) / 2;
		if(y <= mid) return query(k << 1, x, y);
		else if(x > mid) return query(k << 1 | 1, x, y);
		else
		{
			node L = query(k << 1, x, y), R = query(k << 1 | 1, x, y);
			node rt;
			push_up(rt, L, R);
			return rt;
		}
	}
}
int main()
{ 
	int n, m;
	while(scanf("%d%d", &n, &m), n + m)
	{
		SegmentTree :: build(1, 1, n);
		while(m --)
		{
			int f, x, y, c;
			read(f, x, y, c);
			if(f <= 3) SegmentTree :: modify(1, x, y, f, c);
			else
			{
				int ans = SegmentTree :: query(1, x, y).sum[c];
				println(ans);
			}
		}
	}
    return 0;
}