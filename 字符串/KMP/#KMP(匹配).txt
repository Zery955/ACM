namespace KMP{
	//O(N + M)
	const int N = 1e6 + 5; //模式串长度
	typedef char Data; // 串类型
	Data *P, *T; //模式串、文本串
	int np, nt;
	int fail[N];
	//下标从 1 开始
	void init(Data* _T, int _nt, Data* _P, int _np)
	{
		np = _np;
		nt = _nt;
		P = _P - 1;	
		T = _T - 1;
	}
	void self()
	{
		fail[1] = 0;
		int j = 0;
		for(int i = 2; i <= np; ++i)
		{
			while(j && P[j + 1] != P[i]) j = fail[j];
			if(P[j + 1] == P[i]) j++;
			fail[i] = j;
		}
	}
	void kmp()
	{
		self();
		int res = 0;
		int j = 0;
		for(int i = 1; i <= nt; ++i)
		{
			while(j && P[j + 1] != T[i]) j = fail[j];
			if(P[j + 1] == T[i]) j++;
			if(j == np)
			{
				//j = 0; //不重叠
				j = fail[j];//可重叠
			}
		}
	}
}