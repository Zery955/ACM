namespace EXKMP{
	const int N = 1e6;
	bool pprefix[N]; //s[1 ··· i] 是否是回文前缀
	bool psuffix[N]; //s[i ··· n] 是否是回文后缀
	int n;
	int z[N], ex[N];
	char s[N], rs[N];
	void init(char *_s, int _n)
	{
		n = _n;
		for(int i = 0; i < n; ++ i)
		{
			s[i] = _s[i];
			rs[i] = _s[n - 1 - i];
		}
	}
	void exkmp(char *T, int nt, char *P, int np, int *z, int *ex, bool* p)
	{
		//下标从1开始
		T --; P --;
		z[1] = np;
		int match = 0;
		while(P[1 + match] == P[2 + match] && 2 + match <= np) match ++;
		z[2] = match;
		int po = 2;
		int R = z[po];
		int len;
		for(int i = 3; i <= np; ++i)
		{
			len = i - po + 1;
			if(z[len] + len <= R)  z[i] = z[len];
			else
			{
				match = R - len + 1;
				if(match < 0) match = 0;
				while(P[1 + match] == P[i + match] && i + match <= np) match ++;
				z[i] = match;
				po = i;
				R = z[i];
			}
		}
		match = 0;
		while(T[1 + match] == P[1 + match] && match < np && match < nt ) match ++;
		ex[1] = match;
		po = 1;
		R = ex[po];
		for(int i = 2; i <= nt; ++i)
		{
			len = i - po + 1;
			if(z[len] + len <= R)  ex[i] = z[len];
			else
			{
				match = R - len + 1;
				if(match < 0) match = 0;
				while(P[1 + match] == T[i + match] && i + match <= nt && 1 + match <= np) match ++;
				ex[i] = match;
				po = i;
				R = ex[po];
			}
		}
		for(int i = 1; i <= nt; ++ i)
			if(i + ex[i] - 1 == nt) p[i] = 1;
				else p[i] = 0;
	}
	void exkmp()
	{
		exkmp(s, n, rs, n, z, ex, psuffix);
		exkmp(rs, n, s, n, z, ex, pprefix);
		reverse(pprefix + 1, pprefix + n + 1);
	}
}