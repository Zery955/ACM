namespace SA{
	typedef int Data;
	const int N = 2e4 + 5;
	Data *s;
	int n;
	int tax[N]; //桶排序
	int rak[N]; //后缀 i 的第一关键字排名
	int tp[N];  //第二关键字排名为 i 的后缀的起点
	int sa[N];  //排名为 i 的后缀的起点
	int m; // 本质不同的后缀数目上限
	int height[N]; // LCP(suffix(sa[i]), suffix(sa[i - 1]))
	void init(Data *_s, int _n)
	{
		s = _s - 1;
		n = _n;
	}
	void sort() //基数排序
	{
		for(int i = 0; i <= m; ++ i) tax[i] = 0;
		for(int i = 1; i <= n; ++ i) tax[rak[i]] ++ ;
		for(int i = 1; i <= m; ++ i) tax[i] += tax[i - 1];
		for(int i = n; i >= 1; -- i) sa[tax[rak[tp[i]]] -- ] = tp[i];
	}
	void suffix_sort()
	{
		m = N - 1;
		for(int i = 1; i <= n; ++ i) rak[i] = s[i], tp[i] = i;
		sort();
		for(int len = 1, p = 0; p < n; m = p, len <<= 1)
		{
			p = 0;
			for(int i = 1; i <= len; ++ i) tp[ ++ p] = n - len + i; //不存在第二关键字的先优先
			for(int i = 1; i <= n; ++ i) if(sa[i] > len) tp[ ++ p] = sa[i] - len; //此时的第二关键字是上一次某个的全序
			sort();
			swap(tp, rak); //交换指针
			rak[sa[1]] = p = 1;
			for(int i = 2; i <= n; ++ i)
			{
				if(tp[sa[i]] == tp[sa[i - 1]] && tp[sa[i] + len] == tp[sa[i - 1] + len])//对比关键字
					rak[sa[i]] = p;
				else rak[sa[i]] = ++ p;
 			}
		}
	}
	void get_height()
	{
		int j, k = 0;
		for(int i = 1; i <= n; ++ i)
		{
			if(k) k --;
			int j = sa[rak[i] - 1];
			if(j == 0) k = 0;
			else 
			while(j + k <= n && i + k <= n && s[j + k] == s[i + k]) k ++ ;
			height[rak[i]] = k;
		}
	}
	int overlap_k_times(int k)
	{
		suffix_sort();
		get_height();
		int l = 0, r = n - k;
		while(l <= r)
		{
			int mid = l + r >> 1;
			int f = 0;
			for(int i = 2; i <= n; ++ i)
			{
				if(height[i] < mid) continue;
				int cnt = 1;
				while(i <= n && height[i] >= mid)
				{
					cnt ++;
					i ++ ;
				}
				f = max(f, cnt);
			}
			if(f >= k) l = mid + 1;
			else r = mid - 1;
		}
		return r;		
	}
}