namespace Segment_Tree{
	const int N = 1e5 + 5; //基础线段树大小
	const int M = 1e5 + 5; //修改次数
	struct node{
		int l, r;
	//******************** 主席树节点数据 ********************
		int cnt;
	}m[N * 4 + 17 * M]; //一次修改产生 log(M) 个新节点
	int idn, n, size;
	int root[M];
	inline int newp()
	{
		++idn;
		//新点数据初始化
		m[idn].cnt = 0;
		return idn;
	}
	inline int newp(const node& rhs)
	{
		++idn;
		m[idn] = rhs;
		return idn;
	}
	int build(int l, int r)
	{
		int q = newp();
		if(l == r) return q;
		int mid = l + r >> 1;
		m[q].l = build(l, mid), m[q].r = build(mid + 1, r);
		return q;
	}
	inline void init(int _n)
	{
		n = _n;
		idn = 0;
		size = 0;
		root[0] = build(1, n);
	}
	inline void push_up(node &rt, const node &ls, const node &rs)
	{
		rt.cnt = ls.cnt + rs.cnt;
	}
//************************ 静态第 k 小 插入修改 ************************
	int _modify(int p, int l, int r, int x)
	{
		int q = newp(m[p]);
		if(l == r)
		{
			m[q].cnt++;
			return q;
		}
		int mid = l + r >> 1;
		if(x <= mid) m[q].l = _modify(m[p].l, l, mid, x);
		else m[q].r = _modify(m[p].r, mid + 1, r, x);
		push_up(m[q], m[m[q].l], m[m[q].r]);
		return q;
	}
	void insert(int x)
	{
		++size;
		root[size] = _modify(root[size - 1], 1, n, x);
	}
//************************ 静态第 k 小 查询************************
	int _query(int p, int q, int l, int r, int k)
	{
		if(l == r) return l;
		int cnt = m[m[q].l].cnt - m[m[p].l].cnt;
		int mid = l + r >> 1;
		if(k <= cnt) return _query(m[p].l, m[q].l, l, mid, k);
		else return _query(m[p].r, m[q].r, mid + 1, r, k - cnt);
	}
	inline int query(int l, int r, int k)
	{
		return _query(root[l - 1], root[r], 1, n, k);
	}
}