namespace SegmentTree{
	const int N = 1e5 + 5;
	const int Mod = 10007;
	typedef long long ll;
	struct node	//设计线段树节点
	{
		int l, r;
		ll fsame;
		ll fmul, fadd;
		ll sum[4];
	}t[N * 4];
	void push_up(node &rt, const node &ls, const node &rs)//定义上传操作
	{
		for(int i = 1; i <= 3; ++i) rt.sum[i] = (ls.sum[i] + rs.sum[i]) % Mod;
	}
	void mark(int k, int f, ll fval)
	{	
		fval %= Mod;
		ll s[4] = {0, t[k].sum[1], t[k].sum[2], t[k].sum[3]};
		ll len = t[k].r - t[k].l + 1;
		ll fval2 = fval * fval % Mod;
		ll fval3 = fval2 * fval % Mod;
		if(f <= 2 && t[k].fsame == -1)
		{
			if(f == 1)
			{
				t[k].fadd += fval;
				t[k].sum[1] = (s[1] + len * fval % Mod) % Mod;
				t[k].sum[2] = (s[2] + 2 * fval * s[1] % Mod + len * fval2 % Mod) % Mod;
				t[k].sum[3] = (s[3] + 3 * fval2 * s[1] % Mod + 3 * fval * s[2] % Mod + len * fval3 % Mod) % Mod;
			}
			else 
			{
				t[k].fadd = t[k].fadd * fval % Mod;
				t[k].fmul = t[k].fmul * fval % Mod;
				t[k].sum[1] = t[k].sum[1] * fval % Mod;
				t[k].sum[2] = t[k].sum[2] * fval2 % Mod;
				t[k].sum[3] = t[k].sum[3] * fval3 % Mod;
			}
		}
		else
		{
			if(f == 1) t[k].fsame = (t[k].fsame + fval) % Mod;
			else if(f == 2) t[k].fsame = t[k].fsame * fval % Mod;
			else t[k].fsame = fval;
			t[k].fmul = 1;
			t[k].fadd = 0;
			t[k].sum[1] = len * t[k].fsame % Mod;
			t[k].sum[2] = t[k].sum[1] * t[k].fsame % Mod;
			t[k].sum[3] = t[k].sum[2]* t[k].fsame % Mod;
		}
	}
	void push_down(int k)
	{
		if(t[k].fsame != -1)
		{
			mark(k << 1, 3, t[k].fsame);
			mark(k << 1 | 1, 3, t[k].fsame);
		}
		else
		{
			mark(k << 1, 2, t[k].fmul);
			mark(k << 1 | 1, 2, t[k].fmul);
			mark(k << 1, 1, t[k].fadd);
			mark(k << 1 | 1, 1, t[k].fadd);
		}
		t[k].fsame = -1;
		t[k].fmul = 1;
		t[k].fadd = 0;
	}
	void build(int k, int l, int r)
	{
		if(l == r)//定义叶节点初始化操作
		{	
			t[k] = {l, r, 0, 0, 0, 0, 0, 0, 0};
			return;
		}
		int mid = (l + r) / 2;
		build(k << 1, l, mid);
		build(k << 1 | 1, mid + 1, r);
		push_up(t[k], t[k << 1], t[k << 1 | 1]);
		//定义非叶节点的初始化操作
		t[k].l = l, t[k].r = r;
		t[k].fsame = -1;
		t[k].fadd = 0;
		t[k].fmul = 1;
	}
	void modify(int k, int x, int y, int f, long long val)
	{
		if(x > y) return;
		if(x <= t[k].l && t[k].r <= y) return mark(k, f, val);
		push_down(k);
		int mid = (t[k].l + t[k].r) / 2;
		if(x <= mid) modify(k << 1, x, y, f, val);
		if(y > mid) modify(k << 1 | 1, x, y, f, val);
		push_up(t[k], t[k << 1], t[k << 1 | 1]);
	}
	node query(int k, int x, int y)
	{
		
		if(x <= t[k].l && t[k].r <= y) return t[k];
		push_down(k);
		int mid = (t[k].l + t[k].r) / 2;
		if(y <= mid) return query(k << 1, x, y);
		else if(x > mid) return query(k << 1 | 1, x, y);
		else
		{
			node L = query(k << 1, x, y), R = query(k << 1 | 1, x, y);
			node rt;
			push_up(rt, L, R);
			return rt;
		}
	}
}