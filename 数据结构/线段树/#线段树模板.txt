namespace SegmentTree{
	const int N = 1e5 + 5;
	struct node	//设计线段树节点
	{
		int l, r;
		
	}t[N * 4];
	void push_up(node &rt, const node &ls, const node &rs)//定义上传操作
	{
		
	}
	void mark(node &rt, long long val)//定义标记操作
	{
		
	}
	void push_down(int k) //定义下传操作
	{
		
	}
	void build(int k, int l, int r)
	{
		if(l == r)//定义叶节点初始化操作
		{	
			t[k] = {l, r};
			return;
		}
		int mid = (l + r) / 2;
		build(k << 1, l, mid);
		build(k << 1 | 1, mid + 1, r);
		push_up(t[k], t[k << 1], t[k << 1 | 1]);
		//定义非叶节点的初始化操作
		t[k].l = l, t[k].r = r;
	}
	void modify(int k, int x, int y, long long val)
	{
		if(x > y) return;
		if(x <= t[k].l && t[k].r <= y) return mark(t[k], val);
		push_down(k);
		int mid = (t[k].l + t[k].r) / 2;
		if(x <= mid) modify(k << 1, x, y, val);
		if(y > mid) modify(k << 1 | 1, x, y, val);
		push_up(t[k], t[k << 1], t[k << 1 | 1]);
	}
	node query(int k, int x, int y)
	{
		
		if(x <= t[k].l && t[k].r <= y) return t[k];
		push_down(k);
		int mid = (t[k].l + t[k].r) / 2;
		if(y <= mid) return query(k << 1, x, y);
		else if(x > mid) return query(k << 1 | 1, x, y);
		else
		{
			node L = query(k << 1, x, y), R = query(k << 1 | 1, x, y);
			node rt;
			push_up(rt, L, R);
			return rt;
		}
	}
}