struct Base{
	typedef long long ll;
	static const int N = 64;
	ll base[N];
	int _size;
	int count;
//******************** 初始化 ********************
	void init()
	{
		for(int i = 0; i < N; ++i)
			base[i] = 0;
		_size = 0;
		count = 0;
	}
	inline bool zero(){return _size != count;}
	inline int size(){return _size;}
//******************** 尝试插入 ********************
	bool insert(ll x)
	{
		count++;
		for(int i = N - 1; i >= 0; --i)
		{
			if(x >> i & 1)
			{
				if(base[i] == 0)
				{
					base[i] = x;
					_size++;
					return 1;
				}
				else
				{
					x ^= base[i];
				}
			}
		}
		return 0;
	}
//******************** 查找是否可以异或 ********************
	bool find(ll x)
	{
		for(int i = N - 1; i >= 0; --i)
		{
			if(x >> i & 1)
			{
				x ^= base[i];
			}
		}
		return x == 0;
	}
//******************** 简化线性基 ********************
	void rebuild()
	{
		for(int i = 0; i < N; ++i)
		{
			for(int j = i + 1; j < N; ++j)
			{
				if(base[j] >> i & 1) base[j] ^= base[i];
			}
		}
	}
//******************** 求第k小 ********************
	ll kth_min(ll k)
	{
		rebuild();
		if(zero()) k--;
		if(k >= (1LL << _size)) return -1;
		ll res = 0;
		ll cur = 0;
		for(int i = 0; i < N; ++i)
		{
			if(base[i])
			{
				if(k >> cur & 1) res ^= base[i];
				cur++;
			}
		}
		return res;
	}
//******************** 最大值 ********************
	ll max()
	{
		ll res = 0;
		for(int i = N - 1; i >= 0; --i)
		{
			if((res ^ base[i]) > res) 
			{
				res ^= base[i];
			}
		}
		return res;
	}
//******************** 最下值 ********************
	ll min()
	{
		if(zero()) return 0;
		for(int i = 0; i < N; ++i)
		{
			if(base[i]) return base[i];
		}
		return -1; //空的
	}
//******************** 并 ********************
	Base operator | (const Base &rhs)
	{
		Base res = *this;
		for(int i = 0 ; i < N; ++i)
			if(rhs.base[i])
				res.insert(rhs.base[i]);
		return res;
	}
//******************** 交 ********************
	Base operator & (const Base &rhs)
	{
		return *this;
	}
};