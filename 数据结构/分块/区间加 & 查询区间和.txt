namespace Block{
	typedef long long ll;
	const int N = 5e4 + 5;
	int SIZE; //块的大小
	int blockid[N];
	ll a[N];// 线性维护的数据
	int n;
	struct node{
		//块状维护的数据
		ll sum;
		ll mark;
	}b[N];
	void init(int _n)
	{
		n = _n;
		SIZE = sqrt(n);
		for(int i = 1; i <= n; ++i) //块编号初始化
		{
			blockid[i] = (i - 1) / SIZE + 1;
			a[i] = 0;
		}
		for(int i = 1; i <= n; i += SIZE) //块内数据初始化
		{
			b[blockid[i]].mark = 0; 
			b[blockid[i]].sum = 0;
		}
	}
	inline ll at(int x) //单点查询
	{
		return a[x] + b[blockid[x]].mark;
	}
	void build() // 建立分块
	{
		for(int i = 1; i <= n; ++i)
		{
			b[blockid[i]].sum += a[i];
		}
	}
	void modify(int l, int r, ll c) // 区间修改
	{
		int B1 = blockid[l];
		int B2 = blockid[r];
		if(B1 == B2)
		{
			for(int i = l; i <= r; ++i) a[i] += c,b[B1].sum += c;
		}
		else
		{
			for(int i = l; blockid[i] == B1; ++i) a[i] += c, b[B1].sum += c;
			for(int i = r; blockid[i] == B2; --i) a[i] += c, b[B2].sum += c;
			for(int i = B1 + 1; i <= B2 - 1; ++i) b[i].sum += c * SIZE, b[i].mark += c;
		}
	}
	ll query(int l, int r, ll mod) //区间询问
	{
		int B1 = blockid[l];
		int B2 = blockid[r];
		ll res = 0;
		if(B1 == B2)
		{
			for(int i = l; i <= r; ++i) res = (res + at(i)) % mod;
		}
		else
		{
			for(int i = l; blockid[i] == B1; ++i) res = (res + at(i)) % mod;
			for(int i = r; blockid[i] == B2; --i) res = (res + at(i)) % mod;
			for(int i = B1 + 1; i <= B2 - 1; ++i) res = (res + b[i].sum) % mod;
		}
		return res;
	}
}